10.86. Introduction 
-> adding new feature components
-> setting up routes in Angular
-> nav links 

Angular is a SPA(Single Page Application), so to move from one page to another,
we need to use routing


10.87. Creating components and routing

ng g c features/home --skip-tests
ng g c features/shop/product-details --skip-tests

-- app.routes.ts --

{ path: '', component: HomeComponent },
{ path: 'shop', component: ShopComponent },
{ path: 'shop/:id', component: ProductDetailsComponent },
{ path: '**', redirectTo: '', pathMatch: 'full' }

-- app.component.html --
-> replace <app-shop> with <router-outlet>

Why? 

<router-outlet>
-> acts as a placeholder that Angular dynamically fills based on the current router state

Ex: 
-> if the current route is /shop, <router-outlet> will render the ShopComponent

https://angular.dev/api/router/RouterOutlet

-- header.components.ts --
RouterLink


10.88. Setting up the links in the app

-- header.component.html --
-> add routerLink for Home, Shop, Contact and <img/>

-- header.components.ts --
RouterLinkActive

-- header.component.html --
 <a routerLink="/" 
 routerLinkActive="active"

>Home</a>

 -- header.component.scss --
a {
    &.active {
        color: #7d00fa;
    }
}

The & symbol refers to the parent selector (in this case, a).
When you write &.active, it generates the CSS rule a.active.
This means that the style inside &.active will apply to an <a> element 
with the active class.

Reduce the flickering:
-- shop.component.html --

@if(products){
    .....
}


89. Getting a individual product using Route params

-- shop.service.ts --
 getProduct(id: number) {
    return this.http.get<Product>(this.baseUrl + 'products/' + id);
  }

-- product-details.component.ts --
-> inject the ShopService
-> inject the ActivatedRoute
-> implement ngOnInit()
-> loadProduct()
const id = this.activatedRoute.snapshot.paramMap.get('id');
 this.shopService.getProduct(+id).subscribe({
  next: ...
  error: ...
 })

 +id: converts the string to a number

Dictionary:
.activatedRoute 
  -> angular service provided by ActivatedRoute
  -> gives access to information about the active route that the user is currently on 
  -> includes route, query params, data and other route-related information
  -> https://next.angular.dev/api/router/ActivatedRoute#

Properties:
.snapshot, .title, .url, .params, .queryParams, ...


.snapshot
-> static snapshot of the route state at the moment this component was initialized
-> unlike activateRoute.params(an Observable), snapshot is not reactive
-> it captures the route params at a specific point in time(component initialized)  
-> https://angular.dev/api/router/ActivatedRouteSnapshot 

Properties:
.routeConfig, .title, .url, .params, .queryParams, ...


.paramMap
-> a property of .snapshot that is a interface of ParamMap
-> ensures that parameter values are accessible via methods 
instead of directly accessing an object 
-> https://next.angular.dev/api/router/ParamMap# 

Properties:
.get, .getAll, .has, .keys


-- product-details.component.html --
@if(product){
  <h1 class="text-2lx">{{product.name}}</h1>
}

-- product-item.component.html --
<mat-card appearance="raised" routerLink="/shop/{{product.id}}" class="product-card">

-- product-item.component.ts --
RouterLink

-- product-item.component.scss --
.product-card {
    transition: transform 0.2s, box-shadow 0.2s;
}

.product-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    cursor: pointer;
}

Dictionary:
How Routing is working in Angular?
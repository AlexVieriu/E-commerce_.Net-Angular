10.86. Introduction 
-> adding new feature components
-> setting up routes in Angular
-> nav links 

Angular is a SPA(Single Page Application), so to move from one page to another,
we need to use routing


10.87. Creating components and routing

ng g c features/home --skip-tests
ng g c features/shop/product-details --skip-tests

-- app.routes.ts --

{ path: '', component: HomeComponent },
{ path: 'shop', component: ShopComponent },
{ path: 'shop/:id', component: ProductDetailsComponent },
{ path: '**', redirectTo: '', pathMatch: 'full' }

-- app.component.html --
-> replace <app-shop> with <router-outlet>

Why? 

<router-outlet>
-> acts as a placeholder that Angular dynamically fills based on the current router state

Ex: 
-> if the current route is /shop, <router-outlet> will render the ShopComponent

https://angular.dev/api/router/RouterOutlet

-- header.components.ts --
RouterLink


10.88. Setting up the links in the app

-- header.component.html --
-> add routerLink for Home, Shop, Contact and <img/>

-- header.components.ts --
RouterLinkActive

-- header.component.html --
 <a routerLink="/" 
 routerLinkActive="active"

>Home</a>

 -- header.component.scss --
a {
    &.active {
        color: #7d00fa;
    }
}

The & symbol refers to the parent selector (in this case, a).
When you write &.active, it generates the CSS rule a.active.
This means that the style inside &.active will apply to an <a> element 
with the active class.

Reduce the flickering:
-- shop.component.html --

@if(products){
    .....
}



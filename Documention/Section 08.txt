8.63. Introduction 
-> adding components
-> http client module
-> observables
-> Typescript 

Goal:
-> able to use Http client to retrieve data from the API
-> understand the basics of observables and Typescript

8.64. Setting up the folder structure and creating components

-- client -> src -> app -> core --
-> services
-> guards 
-> interceptors


-- -- client -> src -> app -> shared --
-> shared components
-> shared directives
-> shared models

-- -- client -> src -> app -> features --
-> shop
-> shopping cart
-> checkout

-- -- client -> src -> app -> layout --
-> header
-> footer

Open the terminal: 
-> at the end of the terminal we have aliases(snippets) that we will use
cd skinet/client
ng help             
ng generate help 
ng generate component [name] (aliases: ng c [name])
ng generate guard [name] (aliases: ng g guard [name])
ng g c layout/header --dry-run 
    -> creates:
        -> header.component.ts
        -> header.component.html
        -> header.component.spec.ts
        -> header.component.scss
ng g c layout/header --skip-tests
    -> creates 
        -> header.component.ts
        -> header.component.html
        -> header.component.scss

Dictionary:
--dry-run : running the command without actually making any changes to the filesystem

Check to see if the header component is created:
cd skinet/client
ns serve
-> browse to http://localhost:4200/


8.65. Adding a Header component
-- skinet -> client -> src -> app -> layout -> header -> header.component.html --

https://material.angular.io/components/categories
-> Badge
-> Button

-- skinet -> client -> src -> app -> layout -> header -> header.component.ts --
  imports: [
    MatIcon,
    MatButton,
    MatBadge
  ]

Dictionary:
border-b: 
-> border-bottom-width: 1px;

shadow-md: 
-> medium shadow (sm, md, lg, xl, 2xl) 

p-3:
-> padding: 0.75rem;

w-full:      
-> width: 100%

flex:
-> utilities for controlling how flex items both grow and shrink
https://tailwindcss.com/docs/flex

align-middle: 
-> vertical-align: middle;
-> align items along the center of the container’s cross axis
https://tailwindcss.com/docs/vertical-align#middle

items-center:
-> align-items: center;
-> align items along the center of the container’s cross axis
https://tailwindcss.com/docs/align-items#center

justify-between: 
-> justify-content: space-between; 
-> items along the container’s main axis such that there is an equal amount 
of space between each item 
https://tailwindcss.com/docs/justify-content#space-between

max-w-screen-2xl: 
-> max-width: 1536px;
-> sets the maximum width of the container to the predefined 2xl breakpoint value
-> classes can be used to give an element a max-width matching a specific breakpoint 
https://tailwindcss.com/docs/max-width#constraining-to-your-breakpoints

mx-auto:
-> margin-left: auto;
   margin-right: auto;
-> adds horizontal margin to the left and right of an element
-> This centers the div horizontally within its parent container
https://tailwindcss.com/docs/container#using-the-container

gap-3:
-> gap-* utilities to change the gap between both rows and columns in 
grid and flexbox layouts
-> gap-x-* and gap-y-*
https://tailwindcss.com/docs/gap#setting-the-gap-between-elements


8.66. Improving the header component
-- client -> public -- 
-> copy the images from the project here
-> restart the server: 
  ng serve

-- head.component.scss --
.customer-badge .mat-badge-content {
    width: 24px;
    height: 24px;
    font-size: 14px;
    line-height: 24px;
}

.customer-badge .mat-icon {
    font-size: 32px;
    width: 32px;
    height: 32px;
}


-- client -> src -> styles.scss --
// get access to the Angular Material
@use '@angular/material' as mat;
...
$customTheme: mat.define-theme();

@include mat.core();

.custom-theme {
    @include mat.all-component-themes($customTheme);

    // override the button color
    .mdc.button,
    .mdc-raised,
    .mdc-stroked-button,
    .mdc-flat-button {
        // use a tailwind class
        @apply rounded-md
    }
}

.container {
    @apply mx-auto max-w-screen-2xl
}

-- client -> src -> index.html --
<html lang="en" class="custom-theme">


Dictionary:
.mdc.button         : Base button
.mdc-raised         : Raised button with a shadow
.mdc-stroked-button : Outlined (stroked) button
.mdc-flat-button    : Flat button with no background


MDC - Material Design Components
-> set of Web Components developed by the Material Design team to provide reusable, 
customizable, and accessible UI components that adhere to Material Design guidelines
https://v15.material.angular.io/guide/mdc-migration
https://www.youtube.com/watch?v=DpCwKpZlcbg 

-> .mdc have now variables to the Material Design Tokens
https://m3.material.io/foundations/design-tokens/overview


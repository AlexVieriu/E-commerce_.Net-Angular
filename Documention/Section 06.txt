6.50. Introduction
-> error handling and exception
-> validation error (at the middleware level)
-> Http response errors
-> middleware
-> CORS (cross origin resource sharing)

HttpResponse(most used):
200 -> Ok
201 -> Created
204 -> No Content
400 -> Bad Request
401 -> Unauthorized
403 -> Forbidden
404 -> Not Found
500 -> Internal Server Error
502 -> Bad Gateway
503 -> Service Unavailable

>= 100 and < 200 => "Informational Responses",
>= 200 and < 300 => "Successful Responses",
>= 300 and < 400 => "Redirection Messages",
>= 400 and < 500 => "Client Error Responses",
>= 500 and < 600 => "Server Error Responses",


6.52. Adding a test controller for error handling

-- API -> Controllers -> BuggyController.cs --
-> add 4 HttpGet methods
    -> GetUnauthorized
    -> GetBadRequest
    -> GetNotFound
    -> GetInternalServerError

-> add HttpPost method
    -> GetValidationError

Postman Collection links for all 5 methods:
-> {{localhost}}/api/buggy/[action name]


6.52. Exception handling middleware

https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-9.0

-- API -> Errors -> ApiErrorResponse.cs --
int StatusCode
string Message
string? Details

-- API -> Middleware -> ExceptionMiddleware.cs --
public async Task InvokeAsync(HttpContext context)
private static Task HandleExceptionAsync(HttpContext context, Exception ex, IHostEnvironment env)

Dictionary:
RequestDelegate : a task that represents the compilation of request processing
IHostEnvironment: provides information about the hosting environment an application is running in

Testing with Postman(Internal Error)


6.53. Validation error Responses

-- Product.cs --
-> because of the "required" attribute, we can't create a JSON file 
when we handle the POST("validationerror") method

Why we used required attribute in the first place?

What we want to do at this chapter?
-> we don't want to create e product from our entity class
-> we want to create a different type of object that we can apply validation
to at the API level

-- API -> DTOs -> CreateProductDTO.cs --
-> use [Required], [Range()] attributes instead of "request"

-- API -> Controllers -> BuggyController.cs --
-> use CreateProductDTO

Postman:
-> test validationerror 

Dictionary:
[ApiController] -> handles models state errors from us

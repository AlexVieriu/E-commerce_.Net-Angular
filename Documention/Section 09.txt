9.73. Introduction
-> Angular services
    -> make our http response 
    -> are singleton in our app         

-> Building the UI for the shop
    -> Angular Material
    -> Tailwind CSS

-> Pagination (from Angular Material)

-> Filtering, Sorting & Search

-> Input properties
    -> as we creates more components, we will break them in smaller pieces
    -> we will pass the properties from the parent component to the child component


9.74. Introduction to Angular services
-> to make a http request, we need to make a service 
-> Angular services are singletons
-> when we generate components in our app, and we move around from 
component to component, the data is created and destroyed when the leave those
component
-> the only way to persist is to use services 
-> all our services are in the "core" folder

-- open terminal --
cd skinet/client
ng g --help
ng g s core/services/shop --dry-run
ng g s core/services/shop --skip-tests

We gonna shift from app component to services:

-- shop.services.ts --
export class ShopService {
  baseUrl = "https://localhost:7096/api/"
  // inject HTTP Client
  private http = inject(HttpClient);

  getProducts() {
    return this.http.get<Pagination<Product>>(this.baseUrl + 'products')
  }
}

-- app.component.ts --
private shopService = inject(ShopService);
... 
this.shopService.getProducts().subscribe({...})


Dictionary:
-- shop.services.ts --
@Injectable         -> we can inject this service wherever we need it our Angular code
providedIn: 'root'  -> when the app is start running, is provided in the entire app


9.75. Designing the shop page
https://material.angular.io/components/card/overview

-- terminal --
cd skinet/client
ng g c features/shop --dry-run
ng g c features/shop --skip-tests

g -> generate
c -> component

-- app.component.ts --
import { Component } from '@angular/core';
import { HeaderComponent } from "./layout/header/header.component";
import { ShopComponent } from "./features/shop/shop.component";

@Component({
  selector: 'app-root',
  standalone: true,
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss',
  imports: [HeaderComponent, ShopComponent],
})
export class AppComponent {
  title = 'Skinet';
}

-- shop.component.html --
<app-header></app-header>
<div class="container mt-6">
    <app-shop></app-shop>
</div>

-- shop.component.ts --
import { Component, inject, OnInit } from '@angular/core';
import { ShopService } from '../../core/services/shop.service';
import { Product } from '../../shared/models/products';
import { MatCard } from '@angular/material/card';

@Component({
  selector: 'app-shop',
  standalone: true,
  templateUrl: './shop.component.html',
  styleUrl: './shop.component.scss', 
  imports: [MatCard]
})
export class ShopComponent implements OnInit {
  private shopService = inject(ShopService);
  products: Product[] = [];

  ngOnInit(): void {
    this.shopService.getProducts().subscribe({
      next: response => this.products = response.data,
      error: error => console.log(error)
    })
  }
}

-- shop.component.html --
<div class="grid grid-cols-5 gap-4">
    @for (product of products; track product.id) {
    <mat-card appearance="raised">
        <img src="{{product.pictureUrl}}" alt="image of {{product.name}}">
    </mat-card>
    }
</div>


-- shop.service.ts  --
return this.http.get<Pagination<Product>>(this.baseUrl + 'products?pageSize=20');


9.76. Adding a product item component

cd skinet/client
ng g c features/shop/product-item --skip-tests 

-- product-item.component.ts --
import { Product } from '../../../shared/models/products';

imports: [MatCard]

export class ProductItemComponent {
  @Input() product?: Product;
}

Files that need to be changed:
-- product-item.component.ts
imports: [MatCard, MatCardContent, CurrencyPipe, MatCardActions, MatButton, MatIcon]

-- product-item.component.html
all the component

-- shop.component.html
(passing param to child component)
<app-product-item [product]="product"></app-product-item>


9.77. Getting the types and brands lists

-- shop.service.ts --
getBrands() 
getTypes()

-- shop.component.ts --
initializeShop()
7.56. Introduction
-> installing the Angular CLI
-> creating the Angular project
-> setting up VS Code for Angular
-> setting up Angular to use HTTPS
-> Adding Angular Material and Tailwind CSS

Neil Cummings text editors:
-> Rider for .net(JetBrains)
-> WebStorm for Angular, React(JetBrains)

Goal:
-> have a working Angular app running on HTTPS
-> understand angular standalone components and how we use them to build an app

Angular Release Schedule
-> major release every 6 months
-> 1-3 minor releases for each major release
-> a patch release build almost every week 
-> at time of recording Angular is on v18


7.57. Creating the angular project

Check the version compatibility:
https://next.angular.dev/reference/versions

-- Install Node.js: https://joachim8675309.medium.com/installing-node-js-with-nvm-4dc469c977d9 --

# chose desired node version
$version = "23.3.0"
# install nvm w/ cmder
choco install cmder
choco install nvm
refreshenv
# install node
nvm install $version
nvm use $version

-- Install a new Node.js version  --
# chose desired node version
$version = "22.12.0"
# install node
nvm install $version


-- Install angular CLI: https://next.angular.dev/tools/cli/setup-local --
node -v
nmp -v

-- PowerShell --
Get-ExecutionPolicy -List
Get-ExecutionPolicy
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned

-- Install angular version --
npm install -g @angular/cli
ng --version
ng version

-- Install Preview angular version --
npm uninstall -g @angular/cli
npm install -g @angular/cli@next
ng --version


-- Create angular app commands --
ng new client
-> select Sass
-> Enable Server-Side Rendering?: No

-- Check if everything is working --
cd client
ng serve

-> browse to the http://localhost:4200/



Dictionary:
Install the last version of PowerShell: https://github.com/PowerShell/PowerShell/releases
-> look for "Assets" -> PowerShell-7.5.0-rc.1-win-x64.msi

Add "onmyposh" to PowerShell:
https://ohmyposh.dev/docs/installation/windows  (download oh my posh)
https://ohmyposh.dev/docs/installation/prompt   (configure oh my posh)

Windows PowerShell vs PowerShell vs Visual Studio 2022 Developer PowerShell v17.13.0-pre.1.0
1. Windows PowerShell
-> this is the older, built-in version of PowerShell that comes with Windows.
-> based on the .NET Framework 

2. PowerShell (PowerShell Core)
-> PowerShell 7.x and beyond are the cross-platform, modern versions of PowerShell
-> PowerShell Core (now just called PowerShell) is cross-platform,

3. Visual Studio 2022 Developer PowerShell
-> PowerShell environment that comes integrated into Visual Studio 2022, specifically for developer tasks
-> customized instance of PowerShell that is designed to provide PowerShell support within Visual Studio 
for development tasks, such as managing builds, running scripts, and interacting with the IDE


5.42. Introduction 
-> sorting
-> filtering
-> searching
-> paging


Pagination:
-> performance
-> parameters passed by query string:
  /api/products?pageNumber=3&pageSize=10  
-> page size should be limited
-> we should always page results

Deferred Execution:
-> when we're building our query, we're not hitting our database, we deferring it until we got the query
-> each part of the query built up as an expression three, and then goes to the database

Steps:
-> query commands are stored in a variable
-> execution of that query will be deferred
-> IQueryable<T> creates an expression three
-> Execution:
    -> ToList(), ToArray(), ToDictionary()
    -> Count() or other singleton queries


5.43. Creating product spec parameters

-- Core -> Specifications -> ProductSpecParams.cs --
List<string> Brands
List<string> Types
string? Sort { get; set; }

-- Core -> Specifications -> ProductSpecification.cs --
public ProductSpecification(ProductSpecParams specParams) : base(x =>
    (specParams.Brands.Count == 0 || specParams.Brands.Contains(x.Brand)) &&
    (specParams.Types.Count == 0 || specParams.Types.Contains(x.Type)))

-- API -> Controllers -> ProductsController.cs --
GetProducts([FromQuery] ProductSpecParams specParams)


5.44. Adding Pagination part 1
-- Infrastructure -> Data -> ProductRepository.cs --

return await query.Skip(5).Take(5).ToListAsync();
-> we need to find a way to apply this to our Specification Pattern

-- Core -> Interfaces -> ISpecification.cs --
int Take { get; }
int Skip { get; }
bool IsPagingEnabled { get; }

-- Core -> Specifications -> BaseSpecification.cs --
public int Take { get; private set; }
public int Skip { get; private set; }
public bool IsPagingEnabled { get; private set; }
protected void ApplyPaging(int skip, int take) { ...}

-- Infrastructure -> Data -> BaseSpecification.cs --
if (spec.IsPagingEnabled)
    query = query.Skip(spec.Skip).Take(spec.Take);

if (spec.IsPagingEnabled)
    selectQuery = selectQuery?.Skip(spec.Skip).Take(spec.Take);


5.45. Adding pagination part 2    

-- Core -> Specifications -> ProductSpecParams.cs --
private const int MaxPageSize 
public int PageIndex
public int PageSize

-- Core -> Specifications -> ProductSpecification.cs --
ApplyPaging(specParams.PageSize * (specParams.PageIndex - 1), specParams.PageSize);

-- API -> RequestHelpers -> Pagination.cs --
int PageIndex
int PageSize
int Count 
IReadOnlyList<T> Data


5.46. Adding pagination part 3

-- Core -> Specifications -> IGenericRepository.cs --
Task<int> CountAsync(ISpecification<T> spec);

-- Core -> Specifications -> ISpecification.cs --
IQueryable<T> ApplyCriteria(IQueryable<T> query);

-- Core -> Specifications -> BaseSpecification.cs --
IQueryable<T> ApplyCriteria(IQueryable<T> query) {...}

-- Infrastructure -> Data -> GenericRepository.cs --
Task<int> CountAsync(ISpecification<T> spec){...}

-- API-> Controllers -> ProductsController.cs --
GetProducts(..)
{
    ...
    var count = await productRepo.CountAsync(spec);
    var pagination = new Pagination<Product>(
        specParams.PageIndex, specParams.PageSize, count, products);

    return Ok(pagination);
}


5.47. Creating a Base API Controller

-- API -> Controllers -> BaseApiController.cs --
-> move the variables items, count and pagination from ProductsController.cs 
to BaseApiController.cs in CreatePagedResult(...)

-- API -> Controllers -> ProductsController.cs --
GetProducts(...) :
-> delete items, count and pagination 
-> return CreatePagedResult(...);  


5.48. Adding the search functionality
-- Core -> Specifications -> ProductSpecParams.cs --
-> add Search propFull

-- Core -> Specifications -> ProductSpecification.cs --
-> add Search logic


159. Introduction
-> creating a Stripe account
-> PCI DSS Compliance
-> Strong Customer Authentication
-> setting up Payment Intents
-> using Stripe Elements
-> confirming Card payments

Goal: 
-> able to accept payments securely globally that complies with EU regulations and PCI DSS regulations

PCI DSS: Payment Card Industry Data Security Standard
-> set of industry standards
-> designed to protect payment card data
-> 12 broad requirements and collectively more than 200 line item requirements

6 key requirements:
-> building and maintaining a secure network
-> protecting cardholder data
-> maintaining a vulnerability management program
-> implementing strong access control measures
-> regular monitor and test networks
-> maintaining an information security policy

PCI DSS non-compliance consequences(don't take credit cards directly):
-> monthly financial penalties from 5000$ to 100.000$
-> infringement consequences ($50 to 90$ per card holder whose information has been endangered)
-> compensation costs
-> legal action 
-> damaged reputation
-> revenue loss
-> federal audits

Strong Customer Authentication:
-> EU standards for authenticating online payments
-> Requires 2 of the 3 elements:
    -> something that Customer 
        -> knows (pass or pin)
        -> has (phone or hardware token)
        -> is (fingerprint)
-> Banks will decline payments that require SCA and don't need this criteria


-- Stripe without SCA(USA and Canadian payments only) : 16.159.jpg  --
1. User -> API              : Create order on API
2. Api -> User -> Stripe    : If successful, make payment to Stripe
3. Stripe -> User           : Stripe return one time use token if payment is successful
4. Client -> API            : Client sends token to the API
5. API -> Stripe            : API sends token to Stripe
6. Stripe -> Client         : Stripe confirms token
7. API -> Client            : On success/failure result sent to the Client


-- Stripe with SCA(Accept payments globally) --
1. User -> API      : Create payment intent with API(before payment)
2. API -> Stripe    : API sends payment intent to Stripe
3. Stripe -> API    : Stripe returns payment intent returns client secret
4. API -> Client    : API return client secret to client
5. USer -> Stripe   : Client sends payment ton Stripe using the client secret
6. Stripe -> User   : Stripe sends confirmation to the client
7. User -> API      : Client creates order with API
8. Stripe -> API    : Stripe sends conformation to API that payment was successful


160. Creating the delivery methods in the API 

-- Core -> Entities -> DeliveryMethod.cs --
-> Id, ShortName, DeliveryTime, Description, Price

-- Infrastructure -> Config -> ProductConfiguration.cs --
-> inherits from IEntityTypeConfiguration
-> implement Configure()
 -> add .Price property with decimal(18,2)

-- StoreContext.cs --
-> add DbSet<DeliveryMethod>

-- Infrastructure -> Data -> Seed Data -> delivery.json --

-- StoreContextSeed.cs --
-> add delivery methods

Create a new migration:
-> we need to be in the skinet folder
cd .. 
dotnet ef migrations add DeliveryMethodsAdded -s API -p Infrastructure
-> double check the migration file
cd API
dotnet watch


Dictionary: 

-- IEntityTypeConfiguration --
https://learn.microsoft.com/en-us/ef/core/modeling/ 

->  enables you to separate entity configuration logic from your DbContext, following 
a "configuration class per entity" pattern
-> each entity gets its own dedicated configuration class

-- EntityTypeBuilder --
https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.metadata.builders.entitytypebuilder?view=efcore-9.0

-> a fluent API that provides methods for configuring various aspects of your entity
    -> Primary keys and alternate keys
    -> Relationships between entities
    -> Property constraints (required, length, etc.)
    -> Indexes
    -> Default values
    -> Table mapping
    -> Shadow properties

-> this approach significantly improves code organization in larger projects with many entities, 
keeping your configurations clean, focused, and maintainable


required vs [Required]
https://stackoverflow.com/questions/75891221/required-vs-required-in-c-sharp-11

required:
-> enforces initialization at compile time

[Required]
-> enforces initialization at runtime


161. Setting up Stripe
https://dashboard.stripe.com/test/dashboard

-> create new account 
    -> name     : skinet-2024
    -> country  : United States 

For developers:
-> publish key  : we give to the client
-> secret key   : only in our server

-> add the keys on our configuration file

-- API -> appsettings.json --
-> we save it here, because appsettings.json will not be saved on GitHub

Add Stripe:
<PackageReference Include="Stripe.net" Version="47.4.0" />

-- Core -> Interfaces -> IPaymentService.cs --
CreateOrUpdatePaymentIntent(string cartId)

-- Infrastructure -> Services -> PaymentService.cs --
CreateOrUpdatePaymentIntent(string cartId)

-- Program.cs --
builder.Services.AddScoped<IPaymentService, PaymentService>();


162. Implementing the payment intent

-- ShoppingCart.cs --
-> add PaymentIntentId, ClientSecret, DeliveryMethodId

-- PaymentService.cs --

Services needed:
-> IConfiguration
-> ICartService
-> IGenericRepository<Product>
-> IGenericRepository<DeliveryMethod>

CreateOrUpdatePaymentIntent(string cartId):
-> get SecretKey from configuration (appsettings.json)
-> get cart from Redis
-> if cart.DeliveryMethodId.HasValue
    -> get delivery method
    -> calculate shipping price
-> for each item in the cart
    -> get the Product
    -> check if the price has changed
    -> create PaymentIntentService obj
    -> create PaymentIntent
        -> if no PaymentIntentId, create a PaymentIntentCreateOptions obj
            -> update amount, currency, payment method
            -> create the intentService
        -> else create a PaymentIntentUpdateOptions obj
            -> update amount 
            -> update the intentService
-> setCartService with the new cart created/updated
-> return cart


163. Creating a payment controller

Task<ActionResult<ShoppingCart>> CreateOrUpdatePaymentIntent(string cartId)
-> get the cart by from PaymentService 

Task<ActionResult<IReadOnlyList<DeliveryMethod>>> GetDeliveryMethods()


Postman:

-- Update Cart --
{{localhost}}/api/cart

{
  "id": "cart1",
  "items": [
    {
      "productId": 17,
      "productName": "Angular Purple Boots",
      "price": 1,
      "quantity": 2,
      "pictureUrl": "https://localhost:5150/images/products/boot-ang2.png",
      "brand": "Angular",
      "type": "Boots"
    }
  ]
}


-- Create Payment Intent as tom--
-> login as tom

{{localhost}}/api/payments/cart1

-> check Stripe:
https://dashboard.stripe.com/test/payments


-- Update Cart - Add payment intent details --

{{localhost}}/api/cart1

{
    "id": "cart",
    "items": [
        {
            "productId": 17,
            "productName": "Angular Purple Boots",
            "price": 1,
            "quantity": 2,
            "pictureUrl": "https://localhost:5150/images/products/boot-ang2.png",
            "brand": "Angular",
            "type": "Boots"
        }
    ],
    "deliveryMethodId": null,
    "clientSecret": "pi_3R3IsTGMOucV11Le1oj03Xlr_secret_z00B8mXlWho7KiMf0Fq4cCCUh",
    "paymentIntentId": "pi_3R3IsTGMOucV11Le1oj03Xlr"
}

-> check if the intent is updated:  
    {{localhost}}/api/payments/cart1 

-> check Stripe:
https://dashboard.stripe.com/test/payments


154. Checkout page layout

-- checkout.component.ts --
import : [MatStepperModule]

-- checkout.component.html --
-> add stepper: 
https://next.material.angular.io/components/stepper/overview

<mat-stepper>
<mat-step>
    -> for: Payment, Delivery, Payment, Review

-- cart.component.html --
remove :   <div class="mx-auto max-w-screen-xl">

-> remove the checkout button:

-- order-summary.component.ts --
location = inject(Location); //  from angular/common

-- order-summary.component.html --
@if(location.path() !== '/checkout') { . . . }


165. Adding client side Stripe

cd skinet/client
npm install @stripe/stripe-js 

-> we want a single instance of Stripe it our app
-> create a StripeService
ng g s core/services/stripe --skip-tests

-> we need the stripe publishable key

-- environment.developments.ts --
-> public key: https://dashboard.stripe.com/test/dashboard
stripePublicKey: 'pk_test_51R3BtWGMOucV11LePsep5xmR9QwIsan35gwZsAMjXx0abJFLNfaoh85sGAc0NE1iY90fvVhvCEzt7lxO64EA9cqB00IxxJHAl4'

-- environment.ts --
stripePublicKey: 'pk_test_51R3BtWGMOucV11LePsep5xmR9QwIsan35gwZsAMjXx0abJFLNfaoh85sGAc0NE1iY90fvVhvCEzt7lxO64EA9cqB00IxxJHAl4'

-- cart.ts --
deliveryMethodId?: number;
paymentIntentId?: string;
clientSecret?: string;

-- cartType.ts --
deliveryMethodId?: number;
paymentIntentId?: string;
clientSecret?: string;

-- stripe.service.ts --
baseUrl = environment.apiUrl;
private stripePromise: Promise<Stripe | null>
private http = inject(HttpClient);
private cartService = inject(CartService);
private elements?: StripeElements;

getStripePromise()
-> return the stripePromise

createOrUpdatePaymentIntent()
-> get the cart from the cartService
-> if no cart, throw an error
-> return the cart (post<Cart>)
    -> use pipe(map(cart => {
        -> to update the cart in the cartService
        -> return cart 
    })) 

initializeStripeElements()
-> check for are elements (stripePublicKey, StripeConstructorOptions )
    -> get elements: .getStripePromise()
    -> if are elements 
        -> get the cart: createOrUpdatePaymentIntent()
            -> goes to the API, PaymentController
                -> then go to the Infrastructure.proj, for the implementation                
        -> set elements with clientSecret, appearance
    -> if no elements throw an error 
-> return elements


Dictionary:

export const loadStripe: (
  publishableKey: string,
  options?: StripeConstructorOptions | undefined
) => Promise<Stripe | null>;

StripeConstructorOptions:
-> stripeAccount    : For Connect applications, specifies the connected account ID
-> apiVersion       : Sets a specific Stripe API version to use
-> locale           : Sets the locale for translations (e.g., 'en', 'fr', 'de')
-> betas            : Optional array of beta features to enable

-- StripeElements (interface) 
https://docs.stripe.com/payments/elements
-> is a set of prebuilt UI components for building your web checkout flow
-> a feature of Stripe.js, our foundational JS library for building payment flows
-> Stripe.js tokenizes sensitive payment details within an Element without ever having them touch your server

1. Imports
-> StripePaymentElement, StripeCardElement, StripeAddressElement, 
and their associated options from an elements module, as well as StripeError from stripe

2. StripeElements Interface
-> update(options)          : Updates the configuration of Elements
-> on(eventType, handler)   : Handles events like updates
-> fetchUpdates()           : Fetches updates from a PaymentIntent or SetupIntent
-> submit()                 : Submits payment details for validation and collection

3. Element Creation and Retrieval
-> address
-> card, cardNumber, cardExpiry, cardCvc
-> payment
-> paymentRequestButton
-> linkAuthentication
-> iban, idealBank, p24Bank, fpxBank
-> affirmMessage, afterpayClearpayMessage
-> issuingCardNumberDisplay, issuingCardCvcDisplay

4. Element Types
-> Defines supported element types (StripeElementType) and their corresponding instances (StripeElement)

5. Configuration Options
StripeElementsOptions and StripeElementsUpdateOptions provide 
settings for initialization and updates, including:
-> locale
-> appearance (for styling)
-> paymentMethodTypes
-> customerOptions
-> captureMethod (manual or automatic capture)
-> clientSecret for authentication

6. Customization and Styling
-> defines Appearance settings to configure the look and feel of the elements
-> supports custom fonts through CssFontSource and CustomFontSource

7. Payment Method Support
-> visa, mastercard, amex, jcb


166. Creating the address elements

-- stripe.service.ts --

createAddressElement()
-> initializeStripeElements()
    -> if (elements)
        -> use mode: 'shipping'
    -> else throw Error
-> return addressElement


-- checkout.component.html --
-> button for with routerLink   : "Continue shopping"
-> button for matStepperNext    : "Next"

-- checkout.component.ts --
private stripeService = inject(StripeService);
private snackBar = inject(SnackbarService);
addressElement?: StripeAddressElement

async ngOnInit() 
try {
   ->  get the addressElement from stripe: .createAddressElement()
   ->  mount the addressElement on the DOM
}
catch{
    -> catch the error with the SnackbarService
}


Dictionary:

-- StripeAddressElement --
-> type StripeAddressElement = StripeElementBase & {
    on(...)
    once(...)
    off(...)    
}

-> on(), once(), off() have 2 parameters: eventType, handler
    -> depending on the value given to eventType and handler, ca do different things
    
-- StripeElementBase --
-> properties: 
    -> mount(domElement: string | HTMLElement): void;
    -> blur(): void;
    -> clear(): void;
    -> destroy(): void;
    -> focus(): void;
    -> unmount(): void;

mount():
-> `element.mount` method attaches your element to the DOM
-> `element.mount` accepts either a CSS Selector (e.g., `'#card-element'`) or a DOM element
-> you need to create a container DOM element to mount an `Element`
-> if the container DOM element has a label, the `Element` 
is automatically focused when its label is clicked.

ngOnInit():
-> a lifecycle hook in Angular that runs exactly once after the first change detection 
cycle checks a component's data-bound props, but before any child components are checked
-> ideal place to perform one-time initialization tasks that require bound properties to be 
available


167. Populating the address in the address form 

-> check what we have for the current User
Postman: Section 14 -> get current user
{{localhost}}/api/account/user-info

-- stripe.service.ts --
private accountService = inject(AccountService);

async createAddressElement() {
    ...

    const user = this.accountService.currentUser();
    let defaultValues: StripeAddressElementOptions['defaultValues'] = {};
            if (user)
        defaultValues.name = user.firstName + ' ' + user.lastName;

    if (user?.address) {
        defaultValues.address = {
        -> add all fields
        }
    }
}

Test the functionality:
-> need to populate the address in the /checkout page

!! We need to reset all the elements when another user is logged in !!

-- stripe.service.ts --

 disposeElements() {
    this.addressElement = undefined;
    this.elements = undefined;
}

-- checkout.component.ts --
ngOnDestroy(): void {
    this.stripeService.disposeElements();
}


Dictionary:

-- Angular lifecycle --
https://angular.dev/guide/components/lifecycle

ngOnDestroy()
-> The ngOnDestroy method runs once just before a component is destroyed
-> Angular destroys a component when it is no longer shown on the page, 
such as being hidden by @if or upon navigating to another page


168. Save the address as default address

https://material.angular.io/components/checkbox/overview

-- account.service.ts --

-> add .pipe to updateAddress()
-> use tap() instead of map(), for NOT interfere with the Observable, only to have side affects

updateAddress(address: any){
    . . . .pipe(
    tap(() => {
    this.currentUser.update(user => {
        if (user)
        user.address = address;
        return user;
    });
}))}

-- checkout.component.ts --
imports: MatPseudoCheckboxModule

accountService = inject(AccountService);
saveAddress = false;

onSaveAddressCheckboxChange(event: MatCheckboxChange) {
    this.saveAddress = event.checked;
}

  async onStepChange(event: StepperSelectionEvent) {
    // index = 1 -> i moved to the next step 
    if (event.previouslySelectedIndex === 1) {
      if (this.saveAddress) {
        const address = await this.getAddressFromStripeAddress();

        address && firstValueFrom(this.accountService.updateAddress(address));
      }
    }
  }

async getAddressFromStripeAddress(): Promise<Address | null> {
    ...
}


-- checkout.component.html --
<mat-stepper 
    (selectionChange)="onStepChange($event)"
    . . .
    
    <mat-checkbox [checked]="saveAddress" (change)="onSaveAddressCheckboxChange($event)">
        Save as default address
    </mat-checkbox>



Dictionary: 

tap() vs map():
-> operators in RxJS

-- tap() --
Purpose      : Side effects without changing the data
Behavior     : Intercepts the Observable stream to perform actions but passes the original values unchanged
Use cases    : Logging, triggering UI updates, or performing operations that don't affect the data flow
Return value : Same values from the source Observable

-- map() --
Purpose      : Transform data
Behavior     : Takes each value from the source Observable, applies a transformation function, and emits the transformed value
Use cases    : Converting data formats, extracting specific properties, or calculations based on incoming values
Return value : New values based on the transformation function


169. Creating the delivery component part1 

-- client -> src -> app -> models -> shared -- 
-- deliveryMethod.ts --
-> shortName, deliveryTime, description, price, id

-> creating a component for each checkout-step

cd skinet/client
ng g c features/checkout/checkout-delivery --skip-tests

-- checkout.component.ts --
baseUrl = environment.apiUrl;
deliveryMethods: DeliveryMethod[] = [];
private http = inject(HttpClient);

getDeliveryMethods(){
    -> if we have deliveryMethods, return them
    -> else, use http to get them
        -> use .pipe(map ... ) to sort them by price
}

-- checkout-delivery.component.ts --
  checkoutService = inject(CheckoutService);

  ngOnInit(): void {
    this.checkoutService.getDeliveryMethods().subscribe();
  }

  -- checkout.component.html --
<app-checkout-delivery>
    <button matStepperPrevious mat-stroked-button>Back</button>
    <button matStepperNext mat-flat-button>Next</button>
</app-checkout-delivery>


170. Creating the delivery component part2

-> add radio button 
https://material.angular.io/components/radio/overview

-- checkout-delivery.component.ts --
imports: [MatRadioModule, CurrencyPipe]

-- checkout-delivery.component.html --


171. Creating the delivery component part3

-> we use signal to change the Delivery fee when we click the radio button

-- cart.service.ts --
selectedDelivery = signal<DeliveryMethod | null>(null);

total = computed(() => {
    const delivery = this.selectedDelivery();
    . . .
    const shipping = delivery ? delivery.price : 0;
})

-- checkout-delivery.component.ts --
ngOnInit(): void {
    this.checkoutService.getDeliveryMethods().subscribe({
        next: methods => {
        if (this.cartService.cart()?.deliveryMethodId) {
            const method = methods.find(m => m.id === this.cartService.cart()?.deliveryMethodId);
            if (method) {
            this.cartService.selectedDelivery.set(method);
            }
        };        
        }
    });
}

updateDeliveryMethod(method: DeliveryMethod) {
    this.cartService.selectedDelivery.set(method);
    const cart = this.cartService.cart();
    if (cart) {
        cart.deliveryMethodId = method.id;
        this.cartService.setCartAsync(cart); // will update the redis DB also
    }
}

-- checkout-delivery.component.html --
-> update <mat-radio-group>

<mat-radio-group class="grid grid-cols-2 gap-4" [value]="cartService.selectedDelivery()?.id"
    (change)="updateDeliveryMethod($event.value)">
. . .
    <mat-radio-button class="w-full h-full" [value]="method"
    [checked]="cartService.selectedDelivery()=== method">
    . . .

-- checkout.component.ts --

async onStepChange(event: StepperSelectionEvent) {
    . . .
    if (event.selectedIndex === 2) {
      await firstValueFrom(this.stripeService.createOrUpdatePaymentIntent());
    }
}

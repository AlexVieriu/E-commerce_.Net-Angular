183. Introduction
-> Adding the Order Entity
-> Aggregate entities
-> Owned entities
-> Unit of Work pattern


184. Creating the order Aggregate part 1

-- Core -> Entities -> OrderAggregate --
-- ShippingAddress.cs --
Name, Line1, Line2, City, State, PostalCode, Country

-- ProductItemOrdered.cs -- 
ProductId, ProductName, PictureUrl

-- OrderStatus.cs (enum)--
Pending, PaymentReceived, PaymentFailed

-- OrderItem.cs --
ItemOrdered, Price, Quantity

-- PaymentSummary.cs --
Last4, Brand, ExpMonth, ExpYear


185. Creating the order Aggregate part 2

-- Core -> Entities -> OrderAggregate --
-- Order.cs --
OrderDate, BuyerEmail, ShippingAddress, DeliveryMethod, 
PaymentSummary, OrderItems, Subtotal, Status, PaymentIntentId


186. Configuring the order entities

-- Infrastructure -> Config -> OrderConfiguration.cs --
public class OrderConfiguration : IEntityTypeConfiguration<Order>
{
    public void Configure(EntityTypeBuilder<Order> builder)
    {
        builder.OwnsOne(o => o.ShippingAddress, a => a.WithOwner());
        builder.OwnsOne(o => o.PaymentSummary, a => a.WithOwner());
        builder.Property(o => o.Status).HasConversion(
            a => a.ToString(),
            a => (OrderStatus)Enum.Parse(typeof(OrderStatus), a)
        );
        builder.Property(x => x.Subtotal).HasColumnType("decimal(18,2)");
        builder.HasMany(x => x.OrderItems).WithOne().OnDelete(DeleteBehavior.Cascade);
        builder.Property(x => x.OrderDate).HasConversion(
            d => d.ToUniversalTime(),
            d => DateTime.SpecifyKind(d, DateTimeKind.Utc)
        );
    }
}

-- Infrastructure -> Config -> OrderItemConfiguration.cs --
public void Configure(EntityTypeBuilder<OrderItem> builder)
{
    builder.OwnsOne(x => x.ItemOrdered, o => o.WithOwner());
    builder.Property(x => x.Price).HasColumnType("decimal(18,2)");
}

-- StoreContext.cs --
public DbSet<Order> Orders { get; set; }
public DbSet<OrderItem> OrderItems { get; set; }

cd skinet
dotnet ef migrations add OrderAggregateAdded -s API -p Infrastructure


Dictionary:

IEntityTypeConfiguration<T>
-> allows configuration for an entity type to be factored into a separate class

EntityTypeBuilder
-> Provides a simple API for configuring an <see cref="IMutableEntityType" />

builder.OwnsOne(o => o.ShippingAddress, a => a.WithOwner());
builder.OwnsOne(o => o.PaymentSummary, a => a.WithOwner());

.OwnsOne(...)
-> ShippingAddress, PaymentSummary are owned entities
-> stored in the same tabled as Order.cs
-> mapped as columns as with prefix
-> doesn't have there own key
-> WithOwner()
    -> establishes the relationship back to the owner

builder.HasMany(x => x.OrderItems).WithOne().OnDelete(DeleteBehavior.Cascade);

.HasMany(...)
-> establishes that an Order.cs has many OrderItem entities

.WithOne() 
-> specifies that each OrderItem belongs to one Order


187. Introducing the unit of work

-> creates repository instances as needed
-> EF Tracks the entities state(add, update, remove)
-> at the end of the transaction UoW.Complete()
-> Dispose the DbContext
-> uses the same lifetime as repository(scoped)
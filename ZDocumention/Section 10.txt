10.86. Introduction 
-> adding new feature components
-> setting up routes in Angular
-> nav links 

Angular is a SPA(Single Page Application), so to move from one page to another,
we need to use routing


10.87. Creating components and routing

ng g c features/home --skip-tests
ng g c features/shop/product-details --skip-tests

-- app.routes.ts --

{ path: '', component: HomeComponent },
{ path: 'shop', component: ShopComponent },
{ path: 'shop/:id', component: ProductDetailsComponent },
{ path: '**', redirectTo: '', pathMatch: 'full' }

-- app.component.html --
-> replace <app-shop> with <router-outlet>

Why? 

<router-outlet>
-> acts as a placeholder that Angular dynamically fills based on the current router state

Ex: 
-> if the current route is /shop, <router-outlet> will render the ShopComponent

https://angular.dev/api/router/RouterOutlet

-- header.components.ts --
RouterLink


10.88. Setting up the links in the app

-- header.component.html --
-> add routerLink for Home, Shop, Contact and <img/>

-- header.components.ts --
RouterLinkActive

-- header.component.html --
 <a routerLink="/" 
 routerLinkActive="active"

>Home</a>

 -- header.component.scss --
a {
    &.active {
        color: #7d00fa;
    }
}

The & symbol refers to the parent selector (in this case, a).
When you write &.active, it generates the CSS rule a.active.
This means that the style inside &.active will apply to an <a> element 
with the active class.

Reduce the flickering:
-- shop.component.html --

@if(products){
    .....
}


10.89. Getting a individual product using Route params

-- shop.service.ts --
 getProduct(id: number) {
    return this.http.get<Product>(this.baseUrl + 'products/' + id);
  }

-- product-details.component.ts --
-> inject the ShopService
-> inject the ActivatedRoute
-> implement ngOnInit()
-> loadProduct()
const id = this.activatedRoute.snapshot.paramMap.get('id');
 this.shopService.getProduct(+id).subscribe({
  next: ...
  error: ...
 })

 +id: converts the string to a number

Dictionary:
.activatedRoute 
  -> angular service provided by ActivatedRoute
  -> gives access to information about the active route that the user is currently on 
  -> includes route, query params, data and other route-related information
  -> https://next.angular.dev/api/router/ActivatedRoute#

Properties:
.snapshot, .title, .url, .params, .queryParams, ...


.snapshot
-> static snapshot of the route state at the moment this component was initialized
-> unlike activateRoute.params(an Observable), snapshot is not reactive
-> it captures the route params at a specific point in time(component initialized)  
-> https://angular.dev/api/router/ActivatedRouteSnapshot 

Properties:
.routeConfig, .title, .url, .params, .queryParams, ...


.paramMap
-> a property of .snapshot that is a interface of ParamMap
-> ensures that parameter values are accessible via methods 
instead of directly accessing an object 
-> https://next.angular.dev/api/router/ParamMap# 

Properties:
.get, .getAll, .has, .keys

-- product-item.component.html --
<mat-card appearance="raised" routerLink="/shop/{{product.id}}" class="product-card">

-- product-item.component.ts --
RouterLink

-- product-item.component.scss --
.product-card {
    transition: transform 0.2s, box-shadow 0.2s;
}

.product-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    cursor: pointer;
}

10.90. Designing the product details page

-- product-details.component.html --
<img> product.pictureUrl
<h1>  product.name
<p>   product.price || currency
<button> shopping cart
<mat-form-field> Quantity
<p>   product.description

-- product-details.component.ts --
CurrencyPipe
MatIcon
MatButton
MatFormField
MatInput
MatLabel
MatDivide

-- styles.scss --
.mdc-notched-outline__notch {
    border-right-style: none !important;
}

10.91. Summary 
-> adding new components
-> setting up routes
-> nav links 

Q: What about lazy loading?
-> add at the end with optimizations

Dictionary:
How Routing is working in Angular?

1. Routing Configuration
-> we create and routing array in -- app.routes.ts --


2. Router Initialization
-> Angular creates an instance of routes service
-> loads the routes array to understand the possible routes
-> Angular listen to the URL changes via the LocationStrategy class


3. How Angular Detects the Current Route?

a. Browser URL Monitor
  -> the Router service listens to changes in the Browser's address bar
  -> the Router detects changes triggered by:
    -> clicking a link(<a routerLink="/shop/123">)
    -> programmatic navigation (this.router.navigate(['/shop/123']))
    -> direct user input in the address bar

b. Matching the URL to a Route
-> Angular takes the current URL and compare it with the Routes array
-> uses prefix-based matching algorithm to determine the most specific route:
  -> /shop/123 -> /shop/:id
  -> / matches ''
  -> ** is a fallback route
-> Angular captures any dynamic segments(like :id) from the URL and stores in the 
ActivateRoute service

c. Activating the Component
-> when a match is found, Angular instantiates the component


4. How Angular Retrieves the id 
a. Route Matching
-> /shop/123 -> /shop/:id (id is a placeholder)

b. Parsing Parameters
-> angular splits the URL into segments (['shop', '123'])
-> compare this segments to the route definition shop/:id
-> recognize id as a parameter and assign value 123

c. Storing Parameters
-> Angular stores the parameter values in the ActivateRoute service
  -> Static snapshot: available immediately via activatedRoute.snapshot.paramMap
  -> Observable: useful for dynamic updates via activatedRoute.paramMap


5. Behind the Scenes of Route Matching 
-> Angular routing system is powered by a tree-based data structure:
  -> a trie is used to efficiently match plans
  -> each segment of the URL is a node in the trie
  -> dynamic segments like :id are represented as wildcards nodes that match any value


6. Role of LocationStrategy
a. PathLocationStrategy (default)
 -> use the HTML history.pushState API for navigation
 -> the full URL path is visible in the browser

b. HashLocationStrategy
 -> use URL fragments(/#/shop/123)
 -> less common, used for old browsers


7. Key Angular Classes in Routing:
-> Router
-> Route
-> RouterModule
-> RouterOutlet
-> ActivatedRoute


8. Practical Example
-> URL Entered: /shop/123
-> Router Matches: compares it to shop/:id in Routes
-> Parameter Extracted: is assigned the value 123
-> Component Loaded: ProductDetailsComponent is instantiated
-> Parameter Accessed:
  -> activateRoute.snapshot.paramMap.get('id') retrieves 123


9. Debugging the Process:
ngOnInit(): void {
  console.log('Route snapshot:', this.activatedRoute.snapshot);
  console.log('Parameter id:', this.activatedRoute.snapshot.paramMap.get('id'));
}

-> navigate to /shop/123/
10.91.png
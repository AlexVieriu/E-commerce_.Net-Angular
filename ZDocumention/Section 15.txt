141. Introduction
-> adding an account feature
-> forms in Angular
-> reactive forms
-> reusable form components
-> client side validation


142. Creating the account components

cd skinet/client
ng g s core/services/account --skip-tests
ng g c features/account/login --skip-tests
ng g c features/account/register --skip-tests

-- app.routes.ts --
{ path: 'login', component: LoginComponent },
{ path: 'register', component: RegisterComponent }

-- header.component.html --
-> add routerLink to Login and Register

-- app -> shared -> models --  
user.ts     : firstName, lastName, email, address
address.ts  : City, State, Line1, Line2, Country, PostalCode

-- app -> core -> services -> account.service.ts --
-> login() ...
-> register() ...
-> getUserInfo() ...
-> logout() ...
-> updateAddress() ...


Dictionary:

-- HttpClient --

1. Methods

get<T>(url, options?)           : Makes a GET request
post<T>(url, body, options?)    : Makes a POST request
put<T>(url, body, options?)     : Makes a PUT request
delete<T>(url, options?)        : Makes a DELETE request
patch<T>(url, body, options?)   : Makes a PATCH request
request<T>(method, url, options?)   : Generic method for any HTTP request
request<T>(method: string, url: string, options?: {...})    : Observable<HttpEvent<T>>

2. Request Options
headers         : For adding HTTP headers
params          : For adding URL parameters
observe         : Controls the response type ('body', 'response', 'events')
responseType    : Specifies the format ('json', 'text', 'blob', 'arraybuffer')
reportProgress  : Enables progress events for uploads/downloads
withCredentials : Includes cookies in cross-site requests

3. Related Interfaces

HttpHeaders         : Manage request/response headers
HttpParams          : Manage URL query parameters
HttpResponse<T>     : Complete HTTP response with status and headers
HttpErrorResponse   : Error HTTP response
HttpEvent<T>        : Base interface for HTTP events
HttpInterceptor     : Interface for intercepting HTTP requests/responses

4. Interceptors
HttpInterceptor interface with intercept() method for modifying requests/responses


143.Introduction to Angular forms 

https://next.angular.dev/guide/forms/reactive-forms

1. FormsModule (Template-driven) : https://next.angular.dev/guide/forms/template-driven-forms
-> template driven
-> easy to use
-> 2 way binding
-> NgModel directive
-> minimal component code
-> automatic tracking by Angular
-> testing is difficult

2. ReactiveFormsModule (Reactive) : https://next.angular.dev/guide/forms/reactive-forms
-> flexible 
-> Immutable data model 
-> uses observable operators
-> more complex component code
-> easier to test
-> reactive transformations (debounce)

Building blocks of forms:
-> FormControl
-> FormGroup
-> FormArray


144. Creating the login form

-- login.component.ts --
imports: [ReactiveFormsModule, MatCard, MatFormField, MatInput, MatLabel, MatButton]

onSubmit():
-> access login(this.loginForm.value) with AccountService    

-> next: this.accountService.getUserInfo();
         this.router.navigate(['/shop']);

--login.component.html--    

Angular-Specific Elements
<mat-card>
<mat-form-field>
<mat-label>

Angular-Specific Attributes
[formGroup]
(ngSubmit)
formControlName
matInput
mat-flat-button
appearance

HTML Attributes
class
type
placeholder


Testing:
https://localhost:4200/

tom@test.com
Pa$$w0rd


-- account.service.ts --
-> adding "withCredentials"

login(values: any)
{
    ...
    return this.http.post<User>(this.baseUrl + 'login', values, { params, withCredentials: true });
}

getUserInfo(){
    return this.http.get<User>(this.baseUrl + 'account/user-info', { withCredentials: true })
    .pipe(...)
}


Dictionary:

withCredentials: true
-> property in your HTTP request enables the browser to send cookies, 
HTTP authentication, and client-side SSL certificates to cross-origin requests


145. Updating the header component

-- header.component.ts --
-> inject the AccountService
-> logout(){...};


-- header.component.html --
@if(accountService.currentUser()) {
<button mat-stroked-button (click)="logout()">Logout</button>
}
@else{
    login button ...
    register button ...
}


Dictionary:
-> services are public so they can be access by other components
-> if the variable is doesn't give an access modifier(public protected, private), 
they are public by default


146. Persisting the login

-> our Angular app, when the cookies has the HttpOnly flag set, 
can't access the cookie from 

How we can check if a user is logged in so we can update the header?

-- account.service.ts --
-> we need to return an observable so we don't .subscribe in the AccountService
getUserInfo(){
    return ... .pipe(map(user => {
        this.currentUser.set(user);
        return user;
    }))    
}

-- init.service.ts --
-> inject the AccountService
init(){
    ...
    return forkJoin([cart$, this.accountService.getUserInfo()]);
}

-- login.component.ts --
-> subscribe to .getUserInfo()


Dictionary:

scheduled:
-> part of RxJS
-> converts from a common {@link ObservableInput} type to an observable where 
subscription and emissions are scheduled on the provided scheduler

forkJoin:
-> allow us for multiple observables to complete and then emits the latest
values as an array


147. Adding an auth interceptor

Interceptor:
-> special type of service that allows you to intercept and modify HTTP requests
and responses globally before they're handled by your application code

ng g interceptor core/interceptors/auth --skip-tests

-- auth.interceptor.ts --
{
    const clonedRequest = req.clone({
        withCredentials: true
    });

    return next(clonedRequest);
}

-- app.appConfig.ts --
-> add authInterceptor to provideHttpClient

-> remove { withCredentials: true } from account.service.ts


148. Adding an Angular Material Menu

-- header.component.ts --
-> import MatMenu, MatDivider, MatListItem, MatMenuTrigger 
https://material.angular.io/components/menu/overview

-- header.component.html --
-> use [matMenuTriggerFor] from Angular Material to store a HTML block for: 
    -> cart 
    -> orders
    -> logout

MatIcons list:
https://fonts.google.com/icons


149. Adding the register form 

-- register.component.ts --
-> inject: FormBuilder, AccountService, Router, SnackbarService
-> create a prop "registerForm" with props: firstName, lastName, email, password
using FormBuilder with group(): fb.group({...})
-> onSubmit():
    -> use register() from AccountService to make a post call to the API
    -> use next: () => {...} to 
        -> write a success message
        -> navigate to the login page

-- register.component.html --
-> same template as Login.html
    -> firstName
    -> lastName
    -> email
    -> password

Dictionary:

FormBuilder:
-> creates an "AbstractControl" from a user-specified configuration
-> provides syntactic sugar that shortens creating instances of a 
"FormControl", "FormGroup", or "FormArray"
-> it reduces the amount of boilerplate needed to build complex forms